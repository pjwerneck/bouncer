// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/.well-known/ready": {
            "get": {
                "description": "Check if the service is ready",
                "tags": [
                    "Health"
                ],
                "summary": "Readiness check",
                "responses": {
                    "200": {
                        "description": "Service is ready",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/event/{name}/send": {
            "get": {
                "description": "Trigger an event",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Event"
                ],
                "summary": "Send an event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Event sent successfully"
                    },
                    "400": {
                        "description": "Bad Request - invalid parameters",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found - event handler not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Conflict - event already sent",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/event/{name}/wait": {
            "get": {
                "description": "Wait for an event to be triggered",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Event"
                ],
                "summary": "Wait for an event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": -1,
                        "description": "Maximum wait time",
                        "name": "maxWait",
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Event signal received",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request - invalid parameters",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found - event handler not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "408": {
                        "description": "Request timeout",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/semaphore/{name}/acquire": {
            "get": {
                "description": "Acquire a semaphore lock.",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Semaphore"
                ],
                "summary": "Acquire a semaphore",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Semaphore name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Semaphore size",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": -1,
                        "description": "Maximum wait time",
                        "name": "maxWait",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 60000,
                        "description": "Expiration time",
                        "name": "expires",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The semaphore release key",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request - invalid parameters",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found - semaphore not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "408": {
                        "description": "Request Timeout - ` + "`" + `maxWait` + "`" + ` exceeded",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/semaphore/{name}/release": {
            "get": {
                "description": "Release a semaphore lock",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Semaphore"
                ],
                "summary": "Release a semaphore",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Semaphore name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Semaphore size",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Release key",
                        "name": "key",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Semaphore released successfully"
                    },
                    "400": {
                        "description": "Bad Request - invalid parameters",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found - semaphore not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Conflict - key is invalid or already released",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tokenbucket/{name}/acquire": {
            "get": {
                "description": "Every ` + "`" + `interval` + "`" + ` milliseconds, the bucket is refilled with ` + "`" + `size` + "`" + ` tokens.\nEach acquire request takes one token out of the bucket, or waits up to ` + "`" + `maxWait` + "`" + ` milliseconds for a token to be available.",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "TokenBucket"
                ],
                "summary": "Acquire a token from a token bucket",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token bucket name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Bucket size",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1000,
                        "description": "Refill interval",
                        "name": "interval",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": -1,
                        "description": "Maximum wait time",
                        "name": "maxWait",
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Token acquired successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request - invalid parameters",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found - token bucket not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "408": {
                        "description": "Request Timeout - ` + "`" + `maxWait` + "`" + ` exceeded",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "tags": [
        {
            "name": "TokenBucket"
        },
        {
            "name": "Semaphore"
        },
        {
            "name": "Event"
        },
        {
            "name": "Health"
        }
    ]
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.1.6",
	Host:             "localhost:5505",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Bouncer API",
	Description:      "A simple rate limiting and synchronization service for distributed systems",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}

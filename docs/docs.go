// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/.well-known/ready": {
            "get": {
                "description": "Check if the service is ready",
                "tags": [
                    "Health"
                ],
                "summary": "Readiness check",
                "responses": {
                    "200": {
                        "description": "Service is ready",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/barrier/{name}": {
            "delete": {
                "description": "Remove a barrier",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Barrier"
                ],
                "summary": "Delete a barrier",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Barrier name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Barrier deleted successfully"
                    },
                    "404": {
                        "description": "Not Found - barrier not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/barrier/{name}/wait": {
            "get": {
                "description": "- Wait until ` + "`" + `size` + "`" + ` parties have arrived or until ` + "`" + `maxwait` + "`" + ` milliseconds have passed.\n- Returns ` + "`" + `409 Conflict` + "`" + ` immediately if ` + "`" + `size` + "`" + ` parties have already arrived.\n- If ` + "`" + `maxwait` + "`" + ` is negative, waits indefinitely.\n- If ` + "`" + `maxwait` + "`" + ` is 0, returns immediately.",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Barrier"
                ],
                "summary": "Wait at barrier",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Barrier name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 2,
                        "description": "Number of parties to wait for",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": -1,
                        "description": "Maximum wait time",
                        "name": "maxwait",
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Barrier completed successfully"
                    },
                    "408": {
                        "description": "Request Timeout - maxwait exceeded",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Conflict - barrier already completed",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/counter/{name}": {
            "delete": {
                "description": "Remove a counter",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Counter"
                ],
                "summary": "Delete a counter",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Counter name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Counter deleted successfully"
                    },
                    "404": {
                        "description": "Not Found - counter not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/counter/{name}/count": {
            "get": {
                "description": "- Atomically adds ` + "`" + `amount` + "`" + ` to counter value\n- If ` + "`" + `amount` + "`" + ` is negative, decrements the counter\n- Returns the new counter value",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Counter"
                ],
                "summary": "Increment or decrement counter",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Counter name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Amount to add (can be negative)",
                        "name": "amount",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "New counter value",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request - invalid parameters",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found - counter not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/counter/{name}/reset": {
            "get": {
                "description": "- Reset counter to specified value\n- If ` + "`" + `value` + "`" + ` is not provided, resets counter to 0\n- Returns 204 No Content on success",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Counter"
                ],
                "summary": "Reset counter value",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Counter name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Value to set",
                        "name": "value",
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Counter reset successful"
                    },
                    "400": {
                        "description": "Bad Request - invalid parameters",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found - counter not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/counter/{name}/value": {
            "get": {
                "description": "- Returns current counter value",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Counter"
                ],
                "summary": "Get counter value",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Counter name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Current counter value",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found - watchdog not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/event/{name}": {
            "delete": {
                "description": "Remove an event",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Event"
                ],
                "summary": "Delete an event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Event deleted successfully"
                    },
                    "404": {
                        "description": "Not Found - event not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/event/{name}/send": {
            "get": {
                "description": "- Send an event, triggering all waiting clients\n- Always returns immediately\n- If the event has already been sent, returns a ` + "`" + `409 Conflict` + "`" + ` error",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Event"
                ],
                "summary": "Send an event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Event sent successfully"
                    },
                    "400": {
                        "description": "Bad Request - invalid parameters",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found - event handler not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Conflict - event already sent",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/event/{name}/wait": {
            "get": {
                "description": "- Wait for an event to be received or until ` + "`" + `maxwait` + "`" + ` milliseconds have passed\n- Returns immediately if the event has already been sent\n- If ` + "`" + `maxwait` + "`" + ` is negative, waits indefinitely.\n- If ` + "`" + `maxwait` + "`" + ` is 0, returns immediately.",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Event"
                ],
                "summary": "Wait for an event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": -1,
                        "description": "Maximum wait time",
                        "name": "maxwait",
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Event signal received",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request - invalid parameters",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found - event handler not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "408": {
                        "description": "Request timeout",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/semaphore/{name}": {
            "delete": {
                "description": "Remove a semaphore",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Semaphore"
                ],
                "summary": "Delete a semaphore",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Semaphore name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Semaphore deleted successfully"
                    },
                    "404": {
                        "description": "Not Found - semaphore not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/semaphore/{name}/acquire": {
            "get": {
                "description": "- Acquire a semaphore lock if available and returns a release ` + "`" + `key` + "`" + `\n- Up to ` + "`" + `size` + "`" + ` locks can be acquired simultaneously.\n- If no lock is available, waits up to ` + "`" + `maxwait` + "`" + ` milliseconds for a lock to be released.\n- Locks are automatically released after ` + "`" + `expires` + "`" + ` milliseconds.\n- If ` + "`" + `maxwait` + "`" + ` is negative, waits indefinitely.\n- If ` + "`" + `maxwait` + "`" + ` is 0, returns immediately.",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Semaphore"
                ],
                "summary": "Acquire a semaphore",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Semaphore name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Semaphore size",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": -1,
                        "description": "Maximum wait time",
                        "name": "maxwait",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 60000,
                        "description": "Expiration time",
                        "name": "expires",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The semaphore release key",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request - invalid parameters",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found - semaphore not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "408": {
                        "description": "Request Timeout - ` + "`" + `maxWait` + "`" + ` exceeded",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/semaphore/{name}/release": {
            "get": {
                "description": "- The lock to be released is identified by the ` + "`" + `key` + "`" + ` returned when the lock was acquired\n- If the ` + "`" + `key` + "`" + ` is invalid or the lock is already released, a ` + "`" + `409 Conflict` + "`" + ` error is returned\n- If the lock is successfully released, a ` + "`" + `204 No Content` + "`" + ` response is returned",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Semaphore"
                ],
                "summary": "Release a semaphore",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Semaphore name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Release key",
                        "name": "key",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Semaphore released successfully"
                    },
                    "400": {
                        "description": "Bad Request - invalid parameters",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found - semaphore not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Conflict - key is invalid or already released",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tokenbucket/{name}": {
            "delete": {
                "description": "Remove a token bucket",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "TokenBucket"
                ],
                "summary": "Delete a token bucket",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token bucket name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Token bucket deleted successfully"
                    },
                    "404": {
                        "description": "Not Found - token bucket not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tokenbucket/{name}/acquire": {
            "get": {
                "description": "- Each ` + "`" + `acquire` + "`" + ` request consumes one token from the bucket.\n- If no token is available, waits up to ` + "`" + `maxwait` + "`" + ` milliseconds for a fresh token to be available.\n- Every ` + "`" + `interval` + "`" + ` milliseconds the bucket is refilled with ` + "`" + `size` + "`" + ` tokens.\n- If ` + "`" + `maxwait` + "`" + ` is negative, waits indefinitely.\n- If ` + "`" + `maxwait` + "`" + ` is 0, returns immediately.",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "TokenBucket"
                ],
                "summary": "Acquire a token from a token bucket",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token bucket name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Bucket size",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1000,
                        "description": "Refill interval",
                        "name": "interval",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": -1,
                        "description": "Maximum wait time",
                        "name": "maxwait",
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Token acquired successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request - invalid parameters",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found - token bucket not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "408": {
                        "description": "Request Timeout - ` + "`" + `maxwait` + "`" + ` exceeded",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/watchdog/{name}": {
            "delete": {
                "description": "Remove a watchdog",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Watchdog"
                ],
                "summary": "Delete a watchdog",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Watchdog name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Watchdog deleted successfully"
                    },
                    "404": {
                        "description": "Not Found - watchdog not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/watchdog/{name}/kick": {
            "get": {
                "description": "- Reset the watchdog expiration timer, keeping all clients on ` + "`" + `wait` + "`" + ` requests waiting.\n- The watchdog will expire in ` + "`" + `expires` + "`" + ` milliseconds unless kicked again\n- If ` + "`" + `expires` + "`" + ` is 0 or negative, the watchdog will expire immediately",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Watchdog"
                ],
                "summary": "Reset watchdog timer",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Watchdog name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 60000,
                        "description": "Time until expiration in milliseconds",
                        "name": "expires",
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Watchdog timer reset successfully"
                    },
                    "400": {
                        "description": "Bad Request - invalid parameters",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found - watchdog not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/watchdog/{name}/wait": {
            "get": {
                "description": "- Wait for a watchdog to expire or until ` + "`" + `maxwait` + "`" + ` milliseconds have passed\n- Each ` + "`" + `kick` + "`" + ` request resets the watchdog expiration timer.\n- Return immediately if the watchdog has already expired\n- If ` + "`" + `maxwait` + "`" + ` is negative, waits indefinitely.\n- If ` + "`" + `maxwait` + "`" + ` is 0, returns immediately.",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Watchdog"
                ],
                "summary": "Wait for watchdog expiration",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Watchdog name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": -1,
                        "description": "Maximum time to wait",
                        "name": "maxwait",
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Watchdog expired or maxWait reached"
                    },
                    "400": {
                        "description": "Bad Request - invalid parameters",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found - watchdog not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "408": {
                        "description": "Request Timeout - maxWait exceeded",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "tags": [
        {
            "description": "rate limiter",
            "name": "TokenBucket"
        },
        {
            "description": "limit concurrent access",
            "name": "Semaphore"
        },
        {
            "description": "wait until event arrives",
            "name": "Event"
        },
        {
            "description": "wait until event stops arriving",
            "name": "Watchdog"
        },
        {
            "description": "distributed counter",
            "name": "Counter"
        },
        {
            "description": "wait until quorum is reached",
            "name": "Barrier"
        },
        {
            "description": "service health checks",
            "name": "Health"
        }
    ]
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.1.6",
	Host:             "localhost:5505",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Bouncer API",
	Description:      "A simple rate-limiting and synchronization service for distributed systems.\\n\\n",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}

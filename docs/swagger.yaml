basePath: /
definitions:
  bouncermain.BarrierStats:
    properties:
      average_wait_time:
        type: number
      created_at:
        type: string
      size:
        type: integer
      timed_out:
        type: integer
      total_wait_time:
        type: integer
      total_waited:
        type: integer
      triggered:
        type: integer
      waiting:
        type: integer
    type: object
  bouncermain.CounterStats:
    properties:
      created_at:
        type: string
      increments:
        type: integer
      resets:
        type: integer
      value:
        type: integer
    type: object
  bouncermain.EventStats:
    properties:
      average_wait_time:
        type: number
      created_at:
        type: string
      timed_out:
        type: integer
      total_wait_time:
        type: integer
      triggered:
        type: integer
      waited:
        type: integer
    type: object
  bouncermain.SemaphoreStats:
    properties:
      acquired:
        type: integer
      average_wait_time:
        type: number
      created_at:
        type: string
      expired:
        type: integer
      max_ever_held:
        type: integer
      reacquired:
        type: integer
      released:
        type: integer
      timed_out:
        type: integer
      total_wait_time:
        type: integer
    type: object
  bouncermain.TokenBucketStats:
    properties:
      acquired:
        type: integer
      created_at:
        type: string
      timed_out:
        type: integer
      total_wait_time:
        type: integer
    type: object
  bouncermain.WatchdogStats:
    properties:
      average_wait_time:
        type: number
      created_at:
        type: string
      kicks:
        type: integer
      last_kick:
        type: string
      timed_out:
        type: integer
      total_wait_time:
        type: integer
      triggered:
        type: integer
      waited:
        type: integer
    type: object
host: localhost:5505
info:
  contact: {}
  description: |+
    A lightweight RPC service for distributed application control. Provides primitives for rate limiting, resource synchronization, and process coordination.

    ### General Concepts
    - Endpoints use GET method with query parameters
    - Clients block until the operation is completed or `maxwait` is reached
    - Resources are created automatically on first use
    - All time values are in milliseconds
    - All numeric parameters are integers

    ### Quick Tips
    - Test endpoints easily with `curl`, `ab` or your browser
    - Use `maxwait=0` to test resource availability without blocking
    - Monitor resource usage with the `/stats` endpoints
    - Check server readiness at `/.well-known/ready`
    - All endpoints accept an optional `id` parameter for logging

    ### Status Codes
    - `204 No Content`: Operation completed successfully
    - `200 OK`: Operation completed with data returned
    - `408 Request Timeout`: The `maxwait` time was exceeded
    - `409 Conflict`: Operation conflicts with current state


  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: Bouncer API
  version: 0.1.6
paths:
  /.well-known/ready:
    get:
      description: Check if the service is ready
      responses:
        "200":
          description: Service is ready
          schema:
            type: string
      summary: Readiness check
      tags:
      - Health
  /barrier/{name}:
    delete:
      description: Remove a barrier
      parameters:
      - description: Barrier name
        in: path
        name: name
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "204":
          description: Barrier deleted successfully
        "404":
          description: Not Found - barrier not found
          schema:
            type: string
      summary: Delete a barrier
      tags:
      - Barrier
  /barrier/{name}/stats:
    get:
      description: Get current statistics for the barrier
      parameters:
      - description: Barrier name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Barrier statistics
          schema:
            $ref: '#/definitions/bouncermain.BarrierStats'
        "404":
          description: Not Found - barrier not found
          schema:
            type: string
      summary: Get barrier statistics
      tags:
      - Barrier
  /barrier/{name}/wait:
    get:
      description: |
        Synchronize multiple clients at a common barrier point.

        ### Basic Operation
        - Blocks until `size` clients reach the barrier
        - Returns 204 No Content when barrier triggers
        - Returns 408 Request Timeout on `maxwait`
        - Returns 409 Conflict if barrier already triggered
        - If `maxwait` is negative, waits indefinitely
        - If `maxwait` is 0, returns immediately

        ### Usage Tips
        - Default size is 2 clients
        - All waiting clients are released simultaneously
        - Use for multi-party synchronization
        - Consider network latency when setting timeouts
        - Barriers cannot be reused after triggering
      parameters:
      - description: Barrier name
        in: path
        name: name
        required: true
        type: string
      - default: 2
        description: Number of parties to wait for
        in: query
        name: size
        type: integer
      - default: -1
        description: Maximum wait time
        in: query
        name: maxwait
        type: integer
      - description: Optional request identifier for logging
        in: query
        name: id
        type: string
      produces:
      - text/plain
      responses:
        "204":
          description: Barrier completed successfully
        "408":
          description: Request Timeout - maxwait exceeded
          schema:
            type: string
        "409":
          description: Conflict - barrier already completed
          schema:
            type: string
      summary: Wait at barrier
      tags:
      - Barrier
  /counter/{name}:
    delete:
      description: Remove a counter
      parameters:
      - description: Counter name
        in: path
        name: name
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "204":
          description: Counter deleted successfully
        "404":
          description: Not Found - counter not found
          schema:
            type: string
      summary: Delete a counter
      tags:
      - Counter
  /counter/{name}/count:
    get:
      description: |
        Atomically increment or decrement a distributed counter.

        ### Basic Operation
        - Adds `amount` to counter value atomically
        - Returns new counter value
        - Negative `amount` decrements the counter
        - Default `amount` is 1

        ### Usage Tips
        - Use for distributed counting/statistics
        - Safe for concurrent access
        - Combine with monitoring for thresholds
        - Values are 64-bit signed integers
      parameters:
      - description: Counter name
        in: path
        name: name
        required: true
        type: string
      - default: 1
        description: Amount to add (can be negative)
        in: query
        name: amount
        type: integer
      - description: Optional request identifier for logging
        in: query
        name: id
        type: string
      produces:
      - text/plain
      responses:
        "200":
          description: New counter value
          schema:
            type: string
        "400":
          description: Bad Request - invalid parameters
          schema:
            type: string
        "404":
          description: Not Found - counter not found
          schema:
            type: string
      summary: Increment or decrement counter
      tags:
      - Counter
  /counter/{name}/reset:
    get:
      description: |
        Reset counter to specified value.

        ### Basic Operation
        - Sets counter to specified `value`
        - Returns 204 No Content on success
        - Default `value` is 0
        - Operation is atomic

        ### Usage Tips
        - Use for periodic resets
        - Useful for time-based metrics
        - Consider using delete instead of reset
        - All clients see new value immediately
      parameters:
      - description: Counter name
        in: path
        name: name
        required: true
        type: string
      - default: 0
        description: Value to set
        in: query
        name: value
        type: integer
      - description: Optional request identifier for logging
        in: query
        name: id
        type: string
      produces:
      - text/plain
      responses:
        "204":
          description: Counter reset successful
        "400":
          description: Bad Request - invalid parameters
          schema:
            type: string
        "404":
          description: Not Found - counter not found
          schema:
            type: string
      summary: Reset counter value
      tags:
      - Counter
  /counter/{name}/stats:
    get:
      description: Get current statistics for the counter
      parameters:
      - description: Counter name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Counter statistics
          schema:
            $ref: '#/definitions/bouncermain.CounterStats'
        "404":
          description: Not Found - counter not found
          schema:
            type: string
      summary: Get counter statistics
      tags:
      - Counter
  /counter/{name}/value:
    get:
      description: |
        Get current counter value.

        ### Basic Operation
        - Returns current counter value
        - Value is returned as plain text
        - Operation is atomic
        - Returns 200 OK with value

        ### Usage Tips
        - Use for monitoring/metrics collection
        - Values are consistent across all clients
      parameters:
      - description: Counter name
        in: path
        name: name
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "200":
          description: Current counter value
          schema:
            type: string
        "404":
          description: Not Found - watchdog not found
          schema:
            type: string
      summary: Get counter value
      tags:
      - Counter
  /event/{name}:
    delete:
      description: Remove an event
      parameters:
      - description: Event name
        in: path
        name: name
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "204":
          description: Event deleted successfully
        "404":
          description: Not Found - event not found
          schema:
            type: string
      summary: Delete an event
      tags:
      - Event
  /event/{name}/send:
    get:
      description: |
        Triggers an event, sending a message to all waiting clients.

        ### Basic Operation
        - Sends optional message to all waiting clients
        - Returns immediately
        - Can only be triggered once
        - Already triggered events return 409 Conflict

        ### Usage Tips
        - Use meaningful messages for easier debugging
        - Empty message is allowed but not recommended
        - All waiting clients receive the same message
      parameters:
      - description: Event name
        in: path
        name: name
        required: true
        type: string
      - description: Event message
        in: query
        name: message
        type: string
      - description: Optional request identifier for logging
        in: query
        name: id
        type: string
      produces:
      - text/plain
      responses:
        "204":
          description: Event sent successfully
        "400":
          description: Bad Request - invalid parameters
          schema:
            type: string
        "404":
          description: Not Found - event handler not found
          schema:
            type: string
        "409":
          description: Conflict - event already sent
          schema:
            type: string
      summary: Send an event
      tags:
      - Event
  /event/{name}/stats:
    get:
      description: Get current statistics for the event
      parameters:
      - description: Event name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Event statistics
          schema:
            $ref: '#/definitions/bouncermain.EventStats'
        "404":
          description: Not Found - event not found
          schema:
            type: string
      summary: Get event statistics
      tags:
      - Event
  /event/{name}/wait:
    get:
      description: |
        Wait for an event to be triggered.

        ### Basic Operation
        - Blocks until event is triggered or timeout
        - Returns message from triggering client
        - Returns 200 OK with message in body
        - If `maxwait` is negative, waits indefinitely
        - If `maxwait` is 0, returns immediately

        ### Usage Tips
        - Set reasonable `maxwait` to avoid indefinite blocking
        - Check response body for event message
        - Multiple clients can wait for same event
        - All waiting clients receive same message
      parameters:
      - description: Event name
        in: path
        name: name
        required: true
        type: string
      - default: -1
        description: Maximum wait time
        in: query
        name: maxwait
        type: integer
      - description: Optional request identifier for logging
        in: query
        name: id
        type: string
      produces:
      - text/plain
      responses:
        "200":
          description: Event signal received
          schema:
            type: string
        "400":
          description: Bad Request - invalid parameters
          schema:
            type: string
        "404":
          description: Not Found - event handler not found
          schema:
            type: string
        "408":
          description: Request timeout
          schema:
            type: string
      summary: Wait for an event
      tags:
      - Event
  /semaphore/{name}:
    delete:
      description: Remove a semaphore
      parameters:
      - description: Semaphore name
        in: path
        name: name
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "204":
          description: Semaphore deleted successfully
        "404":
          description: Not Found - semaphore not found
          schema:
            type: string
      summary: Delete a semaphore
      tags:
      - Semaphore
  /semaphore/{name}/acquire:
    get:
      description: |
        A `semaphore` can be used to control concurrent access to shared resources.

        ### Basic Operation
        - Up to `size` locks can be held simultaneously
        - Each acquire returns a unique release key
        - Waits up to `maxwait` milliseconds for an available lock
        - If `maxwait` is negative, waits indefinitely
        - If `maxwait` is 0, returns immediately

        ### Usage Tips
        - Locks expire automatically after `expires` milliseconds
        - Set reasonable `expires` time to prevent orphaned locks
        - Use `size>1` for resource pools
      parameters:
      - description: Semaphore name
        in: path
        name: name
        required: true
        type: string
      - default: 1
        description: Semaphore size
        in: query
        name: size
        type: integer
      - default: -1
        description: Maximum wait time
        in: query
        name: maxwait
        type: integer
      - default: 60000
        description: Expiration time
        in: query
        name: expires
        type: integer
      - description: Optional request identifier for logging
        in: query
        name: id
        type: string
      produces:
      - text/plain
      responses:
        "200":
          description: The semaphore release key
          schema:
            type: string
        "400":
          description: Bad Request - invalid parameters
          schema:
            type: string
        "404":
          description: Not Found - semaphore not found
          schema:
            type: string
        "408":
          description: Request Timeout - `maxWait` exceeded
          schema:
            type: string
      summary: Acquire a semaphore
      tags:
      - Semaphore
  /semaphore/{name}/release:
    get:
      description: |
        Releases a previously acquired `semaphore` lock.

        ### Basic Operation
        - Release using the key returned by acquire
        - Returns immediately
        - Invalid or already released keys return 409 Conflict
      parameters:
      - description: Semaphore name
        in: path
        name: name
        required: true
        type: string
      - description: Release key
        in: query
        name: key
        required: true
        type: string
      - description: Optional request identifier for logging
        in: query
        name: id
        type: string
      produces:
      - text/plain
      responses:
        "204":
          description: Semaphore released successfully
        "400":
          description: Bad Request - invalid parameters
          schema:
            type: string
        "404":
          description: Not Found - semaphore not found
          schema:
            type: string
        "409":
          description: Conflict - key is invalid or already released
          schema:
            type: string
      summary: Release a semaphore
      tags:
      - Semaphore
  /semaphore/{name}/stats:
    get:
      description: Get current statistics for the semaphore
      parameters:
      - description: Semaphore name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Semaphore statistics
          schema:
            $ref: '#/definitions/bouncermain.SemaphoreStats'
        "404":
          description: Not Found - semaphore not found
          schema:
            type: string
      summary: Get semaphore statistics
      tags:
      - Semaphore
  /tokenbucket/{name}:
    delete:
      description: Remove a token bucket
      parameters:
      - description: Token bucket name
        in: path
        name: name
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "204":
          description: Token bucket deleted successfully
        "404":
          description: Not Found - token bucket not found
          schema:
            type: string
      summary: Delete a token bucket
      tags:
      - TokenBucket
  /tokenbucket/{name}/acquire:
    get:
      description: |-
        Rate limiting endpoint that implements the Token Bucket algorithm.

        ### Basic Operation
        - Each request consumes one token
        - Bucket is refilled with `size` tokens every `interval` milliseconds
        - Waits up to `maxwait` milliseconds for available token
        - If `maxwait` is negative, waits indefinitely
        - If `maxwait` is 0, returns immediately

        ### Usage Tips
        - For N operations per second, set `size=N` and `interval=1000`
        - For fractional rates, reduce the fraction:
          - 10 ops/minute: use `size=1&interval=6000`
          - Not `size=10&interval=60000` (causes long waits)
        - To prevent burst behavior (thundering herd):
          - Reduce size and interval proportionally
          - Example: `size=1&interval=50` instead of `size=20&interval=1000`
          - Note: Very high rates with small intervals increase CPU load
      parameters:
      - description: Token bucket name
        in: path
        name: name
        required: true
        type: string
      - default: 1
        description: Bucket size
        in: query
        name: size
        type: integer
      - default: 1000
        description: Refill interval
        in: query
        name: interval
        type: integer
      - default: -1
        description: Maximum wait time
        in: query
        name: maxwait
        type: integer
      - description: Optional request identifier for logging
        in: query
        name: id
        type: string
      produces:
      - text/plain
      responses:
        "204":
          description: Token acquired successfully
          schema:
            type: string
        "400":
          description: Bad Request - invalid parameters
          schema:
            type: string
        "404":
          description: Not Found - token bucket not found
          schema:
            type: string
        "408":
          description: Request Timeout - `maxwait` exceeded
          schema:
            type: string
      summary: Acquire a token from a token bucket
      tags:
      - TokenBucket
  /tokenbucket/{name}/stats:
    get:
      description: Get token bucket statistics
      parameters:
      - description: Token bucket name
        in: path
        name: name
        required: true
        type: string
      - description: Token bucket statistics
        in: body
        name: name
        required: true
        schema:
          $ref: '#/definitions/bouncermain.TokenBucketStats'
      produces:
      - application/json
      responses:
        "200":
          description: Token bucket statistics
          schema:
            $ref: '#/definitions/bouncermain.TokenBucketStats'
        "404":
          description: Not Found - token bucket not found
          schema:
            type: string
      summary: View token bucket stats
      tags:
      - TokenBucket
  /watchdog/{name}:
    delete:
      description: Remove a watchdog
      parameters:
      - description: Watchdog name
        in: path
        name: name
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "204":
          description: Watchdog deleted successfully
        "404":
          description: Not Found - watchdog not found
          schema:
            type: string
      summary: Delete a watchdog
      tags:
      - Watchdog
  /watchdog/{name}/kick:
    get:
      description: |
        Reset watchdog timer to prevent expiration notification.

        ### Basic Operation
        - Resets expiration timer to `expires` milliseconds
        - Returns immediately with 204 No Content
        - Zero or negative `expires` triggers immediate expiration
        - Default `expires` is 60000 (one minute)

        ### Usage Tips
        - Kick frequently enough to prevent false alarms
        - Set `expires` longer than maximum task interval
        - Consider network latency when setting intervals
        - Kick before heavy operations, not after
      parameters:
      - description: Watchdog name
        in: path
        name: name
        required: true
        type: string
      - default: 60000
        description: Time until expiration in milliseconds
        in: query
        name: expires
        type: integer
      - description: Optional request identifier for logging
        in: query
        name: id
        type: string
      produces:
      - text/plain
      responses:
        "204":
          description: Watchdog timer reset successfully
        "400":
          description: Bad Request - invalid parameters
          schema:
            type: string
        "404":
          description: Not Found - watchdog not found
          schema:
            type: string
      summary: Reset watchdog timer
      tags:
      - Watchdog
  /watchdog/{name}/stats:
    get:
      description: Get current statistics for the watchdog
      parameters:
      - description: Watchdog name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Watchdog statistics
          schema:
            $ref: '#/definitions/bouncermain.WatchdogStats'
        "404":
          description: Not Found - watchdog not found
          schema:
            type: string
      summary: Get watchdog statistics
      tags:
      - Watchdog
  /watchdog/{name}/wait:
    get:
      description: |
        Monitor a periodic task by waiting for its watchdog to expire.

        ### Basic Operation
        - Blocks until watchdog expires or timeout occurs
        - Returns 204 No Content when watchdog expires
        - Returns 408 Request Timeout on `maxwait`
        - If `maxwait` is negative, waits indefinitely
        - If `maxwait` is 0, returns immediately

        ### Usage Tips
        - Multiple clients can monitor same watchdog
        - All waiting clients are notified on expiration
        - Use reasonable `maxwait` for monitoring tasks
        - Combine with alerts/monitoring systems
      parameters:
      - description: Watchdog name
        in: path
        name: name
        required: true
        type: string
      - default: -1
        description: Maximum time to wait
        in: query
        name: maxwait
        type: integer
      - description: Optional request identifier for logging
        in: query
        name: id
        type: string
      produces:
      - text/plain
      responses:
        "204":
          description: Watchdog expired or maxWait reached
        "400":
          description: Bad Request - invalid parameters
          schema:
            type: string
        "404":
          description: Not Found - watchdog not found
          schema:
            type: string
        "408":
          description: Request Timeout - maxWait exceeded
          schema:
            type: string
      summary: Wait for watchdog expiration
      tags:
      - Watchdog
swagger: "2.0"
tags:
- description: Rate limiting and traffic shaping
  name: TokenBucket
- description: Resource access control and concurrency limits
  name: Semaphore
- description: One-time broadcast notifications
  name: Event
- description: Process monitoring and failure detection
  name: Watchdog
- description: Distributed atomic counters
  name: Counter
- description: Multi-client synchronization points
  name: Barrier
- description: Service health checks
  name: Health

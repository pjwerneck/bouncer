basePath: /
definitions:
  bouncermain.BarrierStats:
    properties:
      average_wait_time:
        type: number
      created_at:
        type: string
      size:
        type: integer
      timed_out:
        type: integer
      total_wait_time:
        type: integer
      total_waited:
        type: integer
      triggered:
        type: integer
      waiting:
        type: integer
    type: object
  bouncermain.CounterStats:
    properties:
      created_at:
        type: string
      increments:
        type: integer
      resets:
        type: integer
      value:
        type: integer
    type: object
  bouncermain.EventStats:
    properties:
      average_wait_time:
        type: number
      created_at:
        type: string
      timed_out:
        type: integer
      total_wait_time:
        type: integer
      triggered:
        type: integer
      waited:
        type: integer
    type: object
  bouncermain.SemaphoreStats:
    properties:
      acquired:
        type: integer
      average_wait_time:
        type: number
      created_at:
        type: string
      expired:
        type: integer
      max_ever_held:
        type: integer
      reacquired:
        type: integer
      released:
        type: integer
      timed_out:
        type: integer
      total_wait_time:
        type: integer
    type: object
  bouncermain.TokenBucketStats:
    properties:
      acquired:
        type: integer
      average_wait_time:
        type: number
      created_at:
        type: string
      timed_out:
        type: integer
      total_wait_time:
        type: integer
    type: object
  bouncermain.WatchdogStats:
    properties:
      average_wait_time:
        type: number
      created_at:
        type: string
      kicks:
        type: integer
      last_kick:
        type: string
      timed_out:
        type: integer
      total_wait_time:
        type: integer
      triggered:
        type: integer
      waited:
        type: integer
    type: object
host: localhost:5505
info:
  contact: {}
  description: A simple rate-limiting and synchronization service for distributed
    systems.\n\n
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: Bouncer API
  version: 0.1.6
paths:
  /.well-known/ready:
    get:
      description: Check if the service is ready
      responses:
        "200":
          description: Service is ready
          schema:
            type: string
      summary: Readiness check
      tags:
      - Health
  /barrier/{name}:
    delete:
      description: Remove a barrier
      parameters:
      - description: Barrier name
        in: path
        name: name
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "204":
          description: Barrier deleted successfully
        "404":
          description: Not Found - barrier not found
          schema:
            type: string
      summary: Delete a barrier
      tags:
      - Barrier
  /barrier/{name}/stats:
    get:
      description: Get current statistics for the barrier
      parameters:
      - description: Barrier name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Barrier statistics
          schema:
            $ref: '#/definitions/bouncermain.BarrierStats'
        "404":
          description: Not Found - barrier not found
          schema:
            type: string
      summary: Get barrier statistics
      tags:
      - Barrier
  /barrier/{name}/wait:
    get:
      description: |-
        - Wait until `size` parties have arrived or until `maxwait` milliseconds have passed.
        - Returns `409 Conflict` immediately if `size` parties have already arrived.
        - If `maxwait` is negative, waits indefinitely.
        - If `maxwait` is 0, returns immediately.
      parameters:
      - description: Barrier name
        in: path
        name: name
        required: true
        type: string
      - default: 2
        description: Number of parties to wait for
        in: query
        name: size
        type: integer
      - default: -1
        description: Maximum wait time
        in: query
        name: maxwait
        type: integer
      produces:
      - text/plain
      responses:
        "204":
          description: Barrier completed successfully
        "408":
          description: Request Timeout - maxwait exceeded
          schema:
            type: string
        "409":
          description: Conflict - barrier already completed
          schema:
            type: string
      summary: Wait at barrier
      tags:
      - Barrier
  /counter/{name}:
    delete:
      description: Remove a counter
      parameters:
      - description: Counter name
        in: path
        name: name
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "204":
          description: Counter deleted successfully
        "404":
          description: Not Found - counter not found
          schema:
            type: string
      summary: Delete a counter
      tags:
      - Counter
  /counter/{name}/count:
    get:
      description: |-
        - Atomically adds `amount` to counter value
        - If `amount` is negative, decrements the counter
        - Returns the new counter value
      parameters:
      - description: Counter name
        in: path
        name: name
        required: true
        type: string
      - default: 1
        description: Amount to add (can be negative)
        in: query
        name: amount
        type: integer
      produces:
      - text/plain
      responses:
        "200":
          description: New counter value
          schema:
            type: string
        "400":
          description: Bad Request - invalid parameters
          schema:
            type: string
        "404":
          description: Not Found - counter not found
          schema:
            type: string
      summary: Increment or decrement counter
      tags:
      - Counter
  /counter/{name}/reset:
    get:
      description: |-
        - Reset counter to specified value
        - If `value` is not provided, resets counter to 0
        - Returns 204 No Content on success
      parameters:
      - description: Counter name
        in: path
        name: name
        required: true
        type: string
      - default: 0
        description: Value to set
        in: query
        name: value
        type: integer
      produces:
      - text/plain
      responses:
        "204":
          description: Counter reset successful
        "400":
          description: Bad Request - invalid parameters
          schema:
            type: string
        "404":
          description: Not Found - counter not found
          schema:
            type: string
      summary: Reset counter value
      tags:
      - Counter
  /counter/{name}/stats:
    get:
      description: Get current statistics for the counter
      parameters:
      - description: Counter name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Counter statistics
          schema:
            $ref: '#/definitions/bouncermain.CounterStats'
        "404":
          description: Not Found - counter not found
          schema:
            type: string
      summary: Get counter statistics
      tags:
      - Counter
  /counter/{name}/value:
    get:
      description: '- Returns current counter value'
      parameters:
      - description: Counter name
        in: path
        name: name
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "200":
          description: Current counter value
          schema:
            type: string
        "404":
          description: Not Found - watchdog not found
          schema:
            type: string
      summary: Get counter value
      tags:
      - Counter
  /event/{name}:
    delete:
      description: Remove an event
      parameters:
      - description: Event name
        in: path
        name: name
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "204":
          description: Event deleted successfully
        "404":
          description: Not Found - event not found
          schema:
            type: string
      summary: Delete an event
      tags:
      - Event
  /event/{name}/send:
    get:
      description: |-
        - Send an event, triggering all waiting clients
        - Always returns immediately
        - If the event has already been sent, returns a `409 Conflict` error
      parameters:
      - description: Event name
        in: path
        name: name
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "204":
          description: Event sent successfully
        "400":
          description: Bad Request - invalid parameters
          schema:
            type: string
        "404":
          description: Not Found - event handler not found
          schema:
            type: string
        "409":
          description: Conflict - event already sent
          schema:
            type: string
      summary: Send an event
      tags:
      - Event
  /event/{name}/stats:
    get:
      description: Get current statistics for the event
      parameters:
      - description: Event name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Event statistics
          schema:
            $ref: '#/definitions/bouncermain.EventStats'
        "404":
          description: Not Found - event not found
          schema:
            type: string
      summary: Get event statistics
      tags:
      - Event
  /event/{name}/wait:
    get:
      description: |-
        - Wait for an event to be received or until `maxwait` milliseconds have passed
        - Returns immediately if the event has already been sent
        - If `maxwait` is negative, waits indefinitely.
        - If `maxwait` is 0, returns immediately.
      parameters:
      - description: Event name
        in: path
        name: name
        required: true
        type: string
      - default: -1
        description: Maximum wait time
        in: query
        name: maxwait
        type: integer
      produces:
      - text/plain
      responses:
        "204":
          description: Event signal received
          schema:
            type: string
        "400":
          description: Bad Request - invalid parameters
          schema:
            type: string
        "404":
          description: Not Found - event handler not found
          schema:
            type: string
        "408":
          description: Request timeout
          schema:
            type: string
      summary: Wait for an event
      tags:
      - Event
  /semaphore/{name}:
    delete:
      description: Remove a semaphore
      parameters:
      - description: Semaphore name
        in: path
        name: name
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "204":
          description: Semaphore deleted successfully
        "404":
          description: Not Found - semaphore not found
          schema:
            type: string
      summary: Delete a semaphore
      tags:
      - Semaphore
  /semaphore/{name}/acquire:
    get:
      description: |-
        - Acquire a semaphore lock if available and returns a release `key`
        - Up to `size` locks can be acquired simultaneously.
        - If no lock is available, waits up to `maxwait` milliseconds for a lock to be released.
        - Locks are automatically released after `expires` milliseconds.
        - If `maxwait` is negative, waits indefinitely.
        - If `maxwait` is 0, returns immediately.
      parameters:
      - description: Semaphore name
        in: path
        name: name
        required: true
        type: string
      - default: 1
        description: Semaphore size
        in: query
        name: size
        type: integer
      - default: -1
        description: Maximum wait time
        in: query
        name: maxwait
        type: integer
      - default: 60000
        description: Expiration time
        in: query
        name: expires
        type: integer
      produces:
      - text/plain
      responses:
        "200":
          description: The semaphore release key
          schema:
            type: string
        "400":
          description: Bad Request - invalid parameters
          schema:
            type: string
        "404":
          description: Not Found - semaphore not found
          schema:
            type: string
        "408":
          description: Request Timeout - `maxWait` exceeded
          schema:
            type: string
      summary: Acquire a semaphore
      tags:
      - Semaphore
  /semaphore/{name}/release:
    get:
      description: |-
        - The lock to be released is identified by the `key` returned when the lock was acquired
        - If the `key` is invalid or the lock is already released, a `409 Conflict` error is returned
        - If the lock is successfully released, a `204 No Content` response is returned
      parameters:
      - description: Semaphore name
        in: path
        name: name
        required: true
        type: string
      - description: Release key
        in: query
        name: key
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "204":
          description: Semaphore released successfully
        "400":
          description: Bad Request - invalid parameters
          schema:
            type: string
        "404":
          description: Not Found - semaphore not found
          schema:
            type: string
        "409":
          description: Conflict - key is invalid or already released
          schema:
            type: string
      summary: Release a semaphore
      tags:
      - Semaphore
  /semaphore/{name}/stats:
    get:
      description: Get current statistics for the semaphore
      parameters:
      - description: Semaphore name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Semaphore statistics
          schema:
            $ref: '#/definitions/bouncermain.SemaphoreStats'
        "404":
          description: Not Found - semaphore not found
          schema:
            type: string
      summary: Get semaphore statistics
      tags:
      - Semaphore
  /tokenbucket/{name}:
    delete:
      description: Remove a token bucket
      parameters:
      - description: Token bucket name
        in: path
        name: name
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "204":
          description: Token bucket deleted successfully
        "404":
          description: Not Found - token bucket not found
          schema:
            type: string
      summary: Delete a token bucket
      tags:
      - TokenBucket
  /tokenbucket/{name}/acquire:
    get:
      description: |-
        - Each `acquire` request consumes one token from the bucket.
        - If no token is available, waits up to `maxwait` milliseconds for a fresh token to be available.
        - Every `interval` milliseconds the bucket is refilled with `size` tokens.
        - If `maxwait` is negative, waits indefinitely.
        - If `maxwait` is 0, returns immediately.
      parameters:
      - description: Token bucket name
        in: path
        name: name
        required: true
        type: string
      - default: 1
        description: Bucket size
        in: query
        name: size
        type: integer
      - default: 1000
        description: Refill interval
        in: query
        name: interval
        type: integer
      - default: -1
        description: Maximum wait time
        in: query
        name: maxwait
        type: integer
      produces:
      - text/plain
      responses:
        "204":
          description: Token acquired successfully
          schema:
            type: string
        "400":
          description: Bad Request - invalid parameters
          schema:
            type: string
        "404":
          description: Not Found - token bucket not found
          schema:
            type: string
        "408":
          description: Request Timeout - `maxwait` exceeded
          schema:
            type: string
      summary: Acquire a token from a token bucket
      tags:
      - TokenBucket
  /tokenbucket/{name}/stats:
    get:
      description: Get token bucket statistics
      parameters:
      - description: Token bucket name
        in: path
        name: name
        required: true
        type: string
      - description: Token bucket statistics
        in: body
        name: name
        required: true
        schema:
          $ref: '#/definitions/bouncermain.TokenBucketStats'
      produces:
      - application/json
      responses:
        "200":
          description: Token bucket statistics
          schema:
            $ref: '#/definitions/bouncermain.TokenBucketStats'
        "404":
          description: Not Found - token bucket not found
          schema:
            type: string
      summary: View token bucket stats
      tags:
      - TokenBucket
  /watchdog/{name}:
    delete:
      description: Remove a watchdog
      parameters:
      - description: Watchdog name
        in: path
        name: name
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "204":
          description: Watchdog deleted successfully
        "404":
          description: Not Found - watchdog not found
          schema:
            type: string
      summary: Delete a watchdog
      tags:
      - Watchdog
  /watchdog/{name}/kick:
    get:
      description: |-
        - Reset the watchdog expiration timer, keeping all clients on `wait` requests waiting.
        - The watchdog will expire in `expires` milliseconds unless kicked again
        - If `expires` is 0 or negative, the watchdog will expire immediately
      parameters:
      - description: Watchdog name
        in: path
        name: name
        required: true
        type: string
      - default: 60000
        description: Time until expiration in milliseconds
        in: query
        name: expires
        type: integer
      produces:
      - text/plain
      responses:
        "204":
          description: Watchdog timer reset successfully
        "400":
          description: Bad Request - invalid parameters
          schema:
            type: string
        "404":
          description: Not Found - watchdog not found
          schema:
            type: string
      summary: Reset watchdog timer
      tags:
      - Watchdog
  /watchdog/{name}/stats:
    get:
      description: Get current statistics for the watchdog
      parameters:
      - description: Watchdog name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Watchdog statistics
          schema:
            $ref: '#/definitions/bouncermain.WatchdogStats'
        "404":
          description: Not Found - watchdog not found
          schema:
            type: string
      summary: Get watchdog statistics
      tags:
      - Watchdog
  /watchdog/{name}/wait:
    get:
      description: |-
        - Wait for a watchdog to expire or until `maxwait` milliseconds have passed
        - Each `kick` request resets the watchdog expiration timer.
        - Return immediately if the watchdog has already expired
        - If `maxwait` is negative, waits indefinitely.
        - If `maxwait` is 0, returns immediately.
      parameters:
      - description: Watchdog name
        in: path
        name: name
        required: true
        type: string
      - default: -1
        description: Maximum time to wait
        in: query
        name: maxwait
        type: integer
      produces:
      - text/plain
      responses:
        "204":
          description: Watchdog expired or maxWait reached
        "400":
          description: Bad Request - invalid parameters
          schema:
            type: string
        "404":
          description: Not Found - watchdog not found
          schema:
            type: string
        "408":
          description: Request Timeout - maxWait exceeded
          schema:
            type: string
      summary: Wait for watchdog expiration
      tags:
      - Watchdog
swagger: "2.0"
tags:
- description: rate limiter
  name: TokenBucket
- description: limit concurrent access
  name: Semaphore
- description: wait until event arrives
  name: Event
- description: wait until event stops arriving
  name: Watchdog
- description: distributed counter
  name: Counter
- description: wait until quorum is reached
  name: Barrier
- description: service health checks
  name: Health

{
    "swagger": "2.0",
    "info": {
        "description": "A lightweight RPC service for distributed application control. Provides primitives for rate limiting, resource synchronization, and process coordination.\n\n### General Concepts\n- Endpoints use GET method with query parameters\n- Clients block until the operation is completed or `maxwait` is reached\n- Resources are created automatically on first use\n- All time values are in milliseconds\n- All numeric parameters are integers\n\n### Quick Tips\n- Test endpoints easily with `curl`, `ab` or your browser\n- Use `maxwait=0` to test resource availability without blocking\n- Monitor resource usage with the `/stats` endpoints\n- Check server readiness at `/.well-known/ready`\n- All endpoints accept an optional `id` parameter for logging\n\n### Status Codes\n- `204 No Content`: Operation completed successfully\n- `200 OK`: Operation completed with data returned\n- `408 Request Timeout`: The `maxwait` time was exceeded\n- `409 Conflict`: Operation conflicts with current state\n\n\n",
        "title": "Bouncer API",
        "contact": {},
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "0.2.0"
    },
    "host": "localhost:5505",
    "basePath": "/",
    "paths": {
        "/.well-known/ready": {
            "get": {
                "description": "Check if the service is ready",
                "tags": [
                    "Health"
                ],
                "summary": "Readiness check",
                "responses": {
                    "200": {
                        "description": "Service is ready",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/barrier/{name}": {
            "delete": {
                "description": "Remove a barrier",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Barrier"
                ],
                "summary": "Delete a barrier",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Barrier name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Barrier deleted successfully"
                    },
                    "404": {
                        "description": "Not Found - barrier not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/barrier/{name}/stats": {
            "get": {
                "description": "Get current statistics for the barrier",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Barrier"
                ],
                "summary": "Get barrier statistics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Barrier name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Barrier statistics",
                        "schema": {
                            "$ref": "#/definitions/bouncermain.BarrierStats"
                        }
                    },
                    "404": {
                        "description": "Not Found - barrier not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/barrier/{name}/wait": {
            "get": {
                "description": "Synchronize multiple clients at a common barrier point.\n\n### Basic Operation\n- Blocks until `size` clients reach the barrier\n- Returns 204 No Content when barrier triggers\n- Returns 408 Request Timeout on `maxwait`\n- Returns 409 Conflict if barrier already triggered\n- If `maxwait` is negative, waits indefinitely\n- If `maxwait` is 0, returns immediately\n\n### Usage Tips\n- Default size is 2 clients\n- All waiting clients are released simultaneously\n- Use for multi-party synchronization\n- Consider network latency when setting timeouts\n- Barriers cannot be reused after triggering\n",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Barrier"
                ],
                "summary": "Wait at barrier",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Barrier name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 2,
                        "description": "Number of parties to wait for",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": -1,
                        "description": "Maximum wait time",
                        "name": "maxwait",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Optional request identifier for logging",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Barrier completed successfully"
                    },
                    "408": {
                        "description": "Request Timeout - maxwait exceeded",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Conflict - barrier already completed",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/counter/{name}": {
            "delete": {
                "description": "Remove a counter",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Counter"
                ],
                "summary": "Delete a counter",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Counter name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Counter deleted successfully"
                    },
                    "404": {
                        "description": "Not Found - counter not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/counter/{name}/count": {
            "get": {
                "description": "Atomically increment or decrement a distributed counter.\n\n### Basic Operation\n- Adds `amount` to counter value atomically\n- Returns new counter value\n- Negative `amount` decrements the counter\n- Default `amount` is 1\n\n### Usage Tips\n- Use for distributed counting/statistics\n- Safe for concurrent access\n- Combine with monitoring for thresholds\n- Values are 64-bit signed integers\n",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Counter"
                ],
                "summary": "Increment or decrement counter",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Counter name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Amount to add (can be negative)",
                        "name": "amount",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Optional request identifier for logging",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "New counter value",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request - invalid parameters",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found - counter not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/counter/{name}/reset": {
            "get": {
                "description": "Reset counter to specified value.\n\n### Basic Operation\n- Sets counter to specified `value`\n- Returns 204 No Content on success\n- Default `value` is 0\n- Operation is atomic\n\n### Usage Tips\n- Use for periodic resets\n- Useful for time-based metrics\n- Consider using delete instead of reset\n- All clients see new value immediately\n",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Counter"
                ],
                "summary": "Reset counter value",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Counter name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Value to set",
                        "name": "value",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Optional request identifier for logging",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Counter reset successful"
                    },
                    "400": {
                        "description": "Bad Request - invalid parameters",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found - counter not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/counter/{name}/stats": {
            "get": {
                "description": "Get current statistics for the counter",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Counter"
                ],
                "summary": "Get counter statistics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Counter name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Counter statistics",
                        "schema": {
                            "$ref": "#/definitions/bouncermain.CounterStats"
                        }
                    },
                    "404": {
                        "description": "Not Found - counter not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/counter/{name}/value": {
            "get": {
                "description": "Get current counter value.\n\n### Basic Operation\n- Returns current counter value\n- Value is returned as plain text\n- Operation is atomic\n- Returns 200 OK with value\n\n### Usage Tips\n- Use for monitoring/metrics collection\n- Values are consistent across all clients\n",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Counter"
                ],
                "summary": "Get counter value",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Counter name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Current counter value",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found - watchdog not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/event/{name}": {
            "delete": {
                "description": "Remove an event",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Event"
                ],
                "summary": "Delete an event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Event deleted successfully"
                    },
                    "404": {
                        "description": "Not Found - event not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/event/{name}/send": {
            "get": {
                "description": "Triggers an event, sending a message to all waiting clients.\n\n### Basic Operation\n- Sends optional message to all waiting clients\n- Returns immediately\n- Can only be triggered once\n- Already triggered events return 409 Conflict\n\n### Usage Tips\n- Use meaningful messages for easier debugging\n- Empty message is allowed but not recommended\n- All waiting clients receive the same message\n",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Event"
                ],
                "summary": "Send an event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Event message",
                        "name": "message",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Optional request identifier for logging",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Event sent successfully"
                    },
                    "400": {
                        "description": "Bad Request - invalid parameters",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found - event handler not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Conflict - event already sent",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/event/{name}/stats": {
            "get": {
                "description": "Get current statistics for the event",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event"
                ],
                "summary": "Get event statistics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Event statistics",
                        "schema": {
                            "$ref": "#/definitions/bouncermain.EventStats"
                        }
                    },
                    "404": {
                        "description": "Not Found - event not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/event/{name}/wait": {
            "get": {
                "description": "Wait for an event to be triggered.\n\n### Basic Operation\n- Blocks until event is triggered or timeout\n- Returns message from triggering client\n- Returns 200 OK with message in body\n- If `maxwait` is negative, waits indefinitely\n- If `maxwait` is 0, returns immediately\n\n### Usage Tips\n- Set reasonable `maxwait` to avoid indefinite blocking\n- Check response body for event message\n- Multiple clients can wait for same event\n- All waiting clients receive same message\n",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Event"
                ],
                "summary": "Wait for an event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": -1,
                        "description": "Maximum wait time",
                        "name": "maxwait",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Optional request identifier for logging",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Event signal received",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request - invalid parameters",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found - event handler not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "408": {
                        "description": "Request timeout",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/semaphore/{name}": {
            "delete": {
                "description": "Remove a semaphore",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Semaphore"
                ],
                "summary": "Delete a semaphore",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Semaphore name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Semaphore deleted successfully"
                    },
                    "404": {
                        "description": "Not Found - semaphore not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/semaphore/{name}/acquire": {
            "get": {
                "description": "A `semaphore` can be used to control concurrent access to shared resources.\n\n### Basic Operation\n- Up to `size` locks can be held simultaneously\n- Each acquire returns a unique release key\n- Waits up to `maxwait` milliseconds for an available lock\n- If `maxwait` is negative, waits indefinitely\n- If `maxwait` is 0, returns immediately\n\n### Usage Tips\n- Locks expire automatically after `expires` milliseconds\n- Set reasonable `expires` time to prevent orphaned locks\n- Use `size\u003e1` for resource pools\n",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Semaphore"
                ],
                "summary": "Acquire a semaphore",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Semaphore name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Semaphore size",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": -1,
                        "description": "Maximum wait time",
                        "name": "maxwait",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 60000,
                        "description": "Expiration time",
                        "name": "expires",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Optional request identifier for logging",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The semaphore release key",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request - invalid parameters",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found - semaphore not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "408": {
                        "description": "Request Timeout - `maxWait` exceeded",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/semaphore/{name}/release": {
            "get": {
                "description": "Releases a previously acquired `semaphore` lock.\n\n### Basic Operation\n- Release using the key returned by acquire\n- Returns immediately\n- Invalid or already released keys return 409 Conflict\n",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Semaphore"
                ],
                "summary": "Release a semaphore",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Semaphore name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Release key",
                        "name": "key",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Optional request identifier for logging",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Semaphore released successfully"
                    },
                    "400": {
                        "description": "Bad Request - invalid parameters",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found - semaphore not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Conflict - key is invalid or already released",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/semaphore/{name}/stats": {
            "get": {
                "description": "Get current statistics for the semaphore",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Semaphore"
                ],
                "summary": "Get semaphore statistics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Semaphore name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Semaphore statistics",
                        "schema": {
                            "$ref": "#/definitions/bouncermain.SemaphoreStats"
                        }
                    },
                    "404": {
                        "description": "Not Found - semaphore not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tokenbucket/{name}": {
            "delete": {
                "description": "Remove a token bucket",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "TokenBucket"
                ],
                "summary": "Delete a token bucket",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token bucket name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Token bucket deleted successfully"
                    },
                    "404": {
                        "description": "Not Found - token bucket not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tokenbucket/{name}/acquire": {
            "get": {
                "description": "Rate limiting endpoint that implements the Token Bucket algorithm.\n\n### Basic Operation\n- Each request consumes one token\n- Bucket is refilled with `size` tokens every `interval` milliseconds\n- Waits up to `maxwait` milliseconds for available token\n- If `maxwait` is negative, waits indefinitely\n- If `maxwait` is 0, returns immediately\n\n### Usage Tips\n- For N operations per second, set `size=N` and `interval=1000`\n- For fractional rates, reduce the fraction:\n  - 10 ops/minute: use `size=1\u0026interval=6000`\n  - Not `size=10\u0026interval=60000` (causes long waits)\n- To prevent burst behavior (thundering herd):\n  - Reduce size and interval proportionally\n  - Example: `size=1\u0026interval=50` instead of `size=20\u0026interval=1000`\n  - Note: Very high rates with small intervals increase CPU load",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "TokenBucket"
                ],
                "summary": "Acquire a token from a token bucket",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token bucket name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Bucket size",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1000,
                        "description": "Refill interval",
                        "name": "interval",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": -1,
                        "description": "Maximum wait time",
                        "name": "maxwait",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Optional request identifier for logging",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Token acquired successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request - invalid parameters",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found - token bucket not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "408": {
                        "description": "Request Timeout - `maxwait` exceeded",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tokenbucket/{name}/stats": {
            "get": {
                "description": "Get token bucket statistics",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TokenBucket"
                ],
                "summary": "View token bucket stats",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token bucket name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Token bucket statistics",
                        "name": "name",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/bouncermain.TokenBucketStats"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token bucket statistics",
                        "schema": {
                            "$ref": "#/definitions/bouncermain.TokenBucketStats"
                        }
                    },
                    "404": {
                        "description": "Not Found - token bucket not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/watchdog/{name}": {
            "delete": {
                "description": "Remove a watchdog",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Watchdog"
                ],
                "summary": "Delete a watchdog",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Watchdog name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Watchdog deleted successfully"
                    },
                    "404": {
                        "description": "Not Found - watchdog not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/watchdog/{name}/kick": {
            "get": {
                "description": "Reset watchdog timer to prevent expiration notification.\n\n### Basic Operation\n- Resets expiration timer to `expires` milliseconds\n- Returns immediately with 204 No Content\n- Zero or negative `expires` triggers immediate expiration\n- Default `expires` is 60000 (one minute)\n\n### Usage Tips\n- Kick frequently enough to prevent false alarms\n- Set `expires` longer than maximum task interval\n- Consider network latency when setting intervals\n- Kick before heavy operations, not after\n",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Watchdog"
                ],
                "summary": "Reset watchdog timer",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Watchdog name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 60000,
                        "description": "Time until expiration in milliseconds",
                        "name": "expires",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Optional request identifier for logging",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Watchdog timer reset successfully"
                    },
                    "400": {
                        "description": "Bad Request - invalid parameters",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found - watchdog not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/watchdog/{name}/stats": {
            "get": {
                "description": "Get current statistics for the watchdog",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Watchdog"
                ],
                "summary": "Get watchdog statistics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Watchdog name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Watchdog statistics",
                        "schema": {
                            "$ref": "#/definitions/bouncermain.WatchdogStats"
                        }
                    },
                    "404": {
                        "description": "Not Found - watchdog not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/watchdog/{name}/wait": {
            "get": {
                "description": "Monitor a periodic task by waiting for its watchdog to expire.\n\n### Basic Operation\n- Blocks until watchdog expires or timeout occurs\n- Returns 204 No Content when watchdog expires\n- Returns 408 Request Timeout on `maxwait`\n- If `maxwait` is negative, waits indefinitely\n- If `maxwait` is 0, returns immediately\n\n### Usage Tips\n- Multiple clients can monitor same watchdog\n- All waiting clients are notified on expiration\n- Use reasonable `maxwait` for monitoring tasks\n- Combine with alerts/monitoring systems\n",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Watchdog"
                ],
                "summary": "Wait for watchdog expiration",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Watchdog name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": -1,
                        "description": "Maximum time to wait",
                        "name": "maxwait",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Optional request identifier for logging",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Watchdog expired or maxWait reached"
                    },
                    "400": {
                        "description": "Bad Request - invalid parameters",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found - watchdog not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "408": {
                        "description": "Request Timeout - maxWait exceeded",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "bouncermain.BarrierStats": {
            "type": "object",
            "properties": {
                "average_wait_time": {
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                },
                "timed_out": {
                    "type": "integer"
                },
                "total_wait_time": {
                    "type": "integer"
                },
                "total_waited": {
                    "type": "integer"
                },
                "triggered": {
                    "type": "integer"
                },
                "waiting": {
                    "type": "integer"
                }
            }
        },
        "bouncermain.CounterStats": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "increments": {
                    "type": "integer"
                },
                "resets": {
                    "type": "integer"
                },
                "value": {
                    "type": "integer"
                }
            }
        },
        "bouncermain.EventStats": {
            "type": "object",
            "properties": {
                "average_wait_time": {
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "timed_out": {
                    "type": "integer"
                },
                "total_wait_time": {
                    "type": "integer"
                },
                "triggered": {
                    "type": "integer"
                },
                "waited": {
                    "type": "integer"
                }
            }
        },
        "bouncermain.SemaphoreStats": {
            "type": "object",
            "properties": {
                "acquired": {
                    "type": "integer"
                },
                "average_wait_time": {
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "expired": {
                    "type": "integer"
                },
                "max_ever_held": {
                    "type": "integer"
                },
                "reacquired": {
                    "type": "integer"
                },
                "released": {
                    "type": "integer"
                },
                "timed_out": {
                    "type": "integer"
                },
                "total_wait_time": {
                    "type": "integer"
                }
            }
        },
        "bouncermain.TokenBucketStats": {
            "type": "object",
            "properties": {
                "acquired": {
                    "type": "integer"
                },
                "average_wait_time": {
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "timed_out": {
                    "type": "integer"
                },
                "total_wait_time": {
                    "type": "integer"
                }
            }
        },
        "bouncermain.WatchdogStats": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "kicks": {
                    "type": "integer"
                },
                "last_kick": {
                    "type": "string"
                },
                "timed_out": {
                    "type": "integer"
                },
                "waited": {
                    "type": "integer"
                }
            }
        }
    },
    "tags": [
        {
            "description": "Rate limiting and traffic shaping",
            "name": "TokenBucket"
        },
        {
            "description": "Resource access control and concurrency limits",
            "name": "Semaphore"
        },
        {
            "description": "One-time broadcast notifications",
            "name": "Event"
        },
        {
            "description": "Process monitoring and failure detection",
            "name": "Watchdog"
        },
        {
            "description": "Distributed atomic counters",
            "name": "Counter"
        },
        {
            "description": "Multi-client synchronization points",
            "name": "Barrier"
        },
        {
            "description": "Service health checks",
            "name": "Health"
        }
    ]
}